<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | devblog of @sgt_mactavish]]></title>
  <link href="http://brain64bit.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://brain64bit.github.io/"/>
  <updated>2015-08-19T23:39:38+07:00</updated>
  <id>http://brain64bit.github.io/</id>
  <author>
    <name><![CDATA[@sgt_mactavish]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tightening controller test]]></title>
    <link href="http://brain64bit.github.io/blog/2015/08/19/tightening-controller-test/"/>
    <updated>2015-08-19T21:41:25+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/08/19/tightening-controller-test</id>
    <content type="html"><![CDATA[<h2>Problem</h2>

<p>One day i saw a snippet of code inside controller test, which is green and sadly is a little hard to understand:</p>

<p>```ruby
describe BooksController, type: :controller do
  describe &ldquo;GET #index&rdquo; do</p>

<pre><code>before do
  expect(Book).to receive_message_chain(:published, :latest, :limit).with(10)
  create_list :book, 5, :published
  create_list :book, 3
end

it { get :index }
</code></pre>

<p>  end
end
```
After a while, i realized this tests are trying to assert query invoked in an <strong>index</strong> action. Unfortunately at first sight it doesn&rsquo;t have a clear intent about what we are going to test.</p>

<!--more-->


<p>Besides that this test is not integrated with the views that will be rendered. The test still pass against this code below, if we forgot to supply view variable:</p>

<p><code>ruby
def index
  books = Book.published.latest.limit(10) # view need @books
end
</code>
Ok, we have a weak controller test.</p>

<h2>Solution</h2>

<p>I think there are two solutions, first is refactor the controller test to be more clear intent and tight, second is tell a controller example to render views.</p>

<ul>
<li>We can apply arrange-act-assert (AAA) pattern for this test and add more assertion. AAA is simple concept: setup context &ndash;> execute thing &ndash;> verify expected behavior.</li>
<li>Tell controller example to render view using <strong>render_views</strong> method and add more assertion with view.</li>
</ul>


<p>```ruby
describe BooksController, type: :controller do
  describe &ldquo;GET #index&rdquo;, :focus do</p>

<pre><code>render_views

# arrange
let!(:published_book){ create :book, :published }
let!(:unpublished_book){ create :book }

# act
before do
  get :index
end

# assertion
it "response ok &amp; render correct view" do
  expect(response).to have_http_status :ok
  expect(response).to render_template :index
end

it "query latest published books" do
  expect(assigns(:books)).to include published_book
end

it "contain only published book title" do
  expect(response.body).to include published_book.title
  expect(response.body).not_to include unpublished_book.title
end
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem using ActiveRecord #exists? in eager load resultset]]></title>
    <link href="http://brain64bit.github.io/blog/2015/03/20/problem-using-activerecord-findermethods-number-exists-in-eager-load-resultset/"/>
    <updated>2015-03-20T19:16:20+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/03/20/problem-using-activerecord-findermethods-number-exists-in-eager-load-resultset</id>
    <content type="html"><![CDATA[<p>So few weeks ago i&rsquo;ve got problem in a rails apps. New Relic reports about 500 error, where the main cause is <strong>accessing method in nil object</strong>.
Here is code snippet, causing the error :
```ruby
class User &lt; ActiveRecord::Base
  has_many :posts, &ndash;> { order &ldquo;created_at DESC&rdquo; }</p>

<p>  def latest_title</p>

<pre><code>posts.exists? &amp;&amp; posts.first.title
</code></pre>

<p>  end
end
```
From the code above, user object have a method <strong>latest_title</strong> it just check if user has posts and fetch the first post&rsquo;s title.
But somehow its produce weird error when calls <strong>user.latest_title</strong>.</p>

<!-- MORE -->


<p><code>ruby
undefined title of nil:NilClass
</code>
the <strong>posts.exists?</strong> returns true but when try accessing the first post its return nil, what a ridiculous error.
Based on error trace, i found the user object is generated by eager_load query, so the query look like this :
<code>ruby
users = User.includes(:posts).order(created_at: :desc).limit(10000)
</code>
the query eager_load <strong>posts</strong> association into user object!!!. So i found the conclusion why the error happen.</p>

<ul>
<li>users resultset are eager loaded the posts association into memory.</li>
<li>for the first time the query performed there are user who dont have posts, because using eager load the posts association stored as empty collection into user object.</li>
<li>inside <strong>#latest_title</strong> method its perform checking using <strong>exists?</strong> which is surprising to me is that exists? method <strong>always check directly to database</strong>.</li>
<li>the error come when timing of resultset generated is slightly difference with operation insertion post tho user who doesn&rsquo;t have posts. The eager load &amp; insertion happen concurrently.</li>
<li>because eager load the posts association still empty collection, but when exists? performed its directly check into database which is return true.</li>
<li>so what actually happen is like <strong>[].first.title</strong> which is produce the error :)</li>
</ul>


<p>Based on that conclusion, there are 2 options. First is do the query without eager load, second is instead use <strong>exists?</strong> please use <strong>any?</strong> which is come from ruby&rsquo;s enumerable, it doesn&rsquo;t directly check the database. And now <strong>latest_title</strong> method implementation look like:
<code>ruby
posts.any? &amp;&amp; posts.first.title
</code>
Just need to be gently and careful when using eager load.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Progressbar Upload with Refile Gem]]></title>
    <link href="http://brain64bit.github.io/blog/2015/03/03/progressbar-upload-with-refile-gem/"/>
    <updated>2015-03-03T23:30:07+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/03/03/progressbar-upload-with-refile-gem</id>
    <content type="html"><![CDATA[<p>There is a ruby gem library for file upload called <a href="https://github.com/refile/refile">refile</a>.
One of features that i like is built in javascript library, which is contains several custom DOM events.
These events also can be listen, so you can provide logic easily around file upload lifecycle process.</p>

<p>By default refile provide helpers to built UI element of file input field:</p>

<p><code>ruby
= f.attachment_field :file_field
</code></p>

<p>From that snippet above refile won&rsquo;t use built in javascript, to enable it just add an option called <strong>direct</strong> with true.</p>

<!-- MORE -->


<p><code>ruby
= f.attachment_field :file_field, direct: true
</code>
Refile provide several events which can attached into form upload element, for attaching the events you can use <strong>addEventListener</strong> :
<code>javascript
form.addEventListener('upload:start', function(e){});
form.addEventListener('upload:progress', function(e){});
form.addEventListener('upload:success', function(e){});
form.addEventListener('upload:complete', function(e){});
form.addEventListener('upload:failure', function(e){});
</code>
Because we focused only progressbar upload, lets construct the form to using twitter bootstrap&rsquo;s progressbar, currently i&rsquo;m using slim-template for view.
```ruby
= form_for @object, html: {class: &lsquo;form-horizontal&rsquo;} do |f|
  &hellip;
  .form-group</p>

<pre><code>= f.label :file_field, class: 'col-sm-3 control-label'
.col-sm-7
  = f.attachment_field :file_field, class: 'form-control', direct: true
  #progress-bar-container.hidden
    .progress.progress-striped
      .progress-bar.progress-bar-info style="width: 0%"
</code></pre>

<p>  &hellip;
<code>
Next lets write the javascript for calculate the progress and manipulate the UI progressbar.
We can utilize **upload:progress** event for this purpose.
</code>javascript
FileUploader = {
  init: function(){</p>

<pre><code>var form = document.querySelector('form');
form.addEventListener('upload:progress', function(event){
  this.doProgress(event);
}.bind(this));
</code></pre>

<p>  },</p>

<p>  doProgress: function(event){</p>

<pre><code>var detail = event.detail;
var percentage = Math.round( (detail.loaded / detail.total) * 100);
$('.progress-bar').css('width', percentage+'%');
</code></pre>

<p>  }
}</p>

<p>&hellip;</p>

<p>$(document).ready(function(){
  Object.create(FileUploader).init();
});
```
Finally this is our progressbar using refile gem, for more information you can read on <a href="https://github.com/refile/refile">refile</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Rmagick On OSX Yosemite]]></title>
    <link href="http://brain64bit.github.io/blog/2015/01/08/install-rmagick-on-osx-yosemite/"/>
    <updated>2015-01-08T23:53:22+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/01/08/install-rmagick-on-osx-yosemite</id>
    <content type="html"><![CDATA[<p>So i&rsquo;ve problem when installing rmagick gem in macosx yosemite, although i&rsquo;ve installed imagemagick on my system.
The problem exists when bundler try to install rmagick gem and having trouble finding <strong>MagickWand.h</strong> for building native extension.
<code>bash
Can't install RMagick 2.13.2. Can't find MagickWand.h.
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
</code></p>

<!-- MORE -->


<p>This problem can be solved by tell explicitly to rmagick where the path of imagemagick headers file with providing configuration options on gem installation,
for example like,
<code>bash
gem install rmagick --with-opt-dir=your_path --with-opt-include=your_path
</code>
But this problem could be solve easily by installing <a href="http://en.wikipedia.org/wiki/Pkg-config">pkgconfig</a> first before installing imagemagick. So now you can install pkgconfig first and reinstall the imagemagick.
If you&rsquo;re using <strong>Homebrew</strong>
<code>bash
brew install pkgconfig
brew uninstall imagemagick &amp;&amp; brew install imagemagick
</code>
Now after reinstallation, you can easilly install rmagick gem as usual <strong>gem install rmagick</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby inject method]]></title>
    <link href="http://brain64bit.github.io/blog/2014/03/18/ruby-inject-method/"/>
    <updated>2014-03-18T07:23:14+07:00</updated>
    <id>http://brain64bit.github.io/blog/2014/03/18/ruby-inject-method</id>
    <content type="html"><![CDATA[<p>Ruby inject method is useful for combining an element inside enumerable, with binary operation and initial value.</p>

<p>For example inject method useful for accumulation in one dimensional array :</p>

<p><code>ruby
[1,2,3].inject(0){ |initial_variable, element| element + initial_variable }
</code>
from above operation, 0 in inject argument is initial value of <strong>initial_variable</strong> if you forget to specify an argument in inject method by default first element in enumerable will be used as initial value.</p>

<!-- MORE -->


<p>From above example inject method will accumulate all element inside array / collection, which is :</p>

<p><code>ruby
[1,2,3].inject(0){ |initial_variable, element| element + initial_variable} # =&gt; same as 1+2+3 = 6
</code>
Another example :</p>

<p><code>ruby
[2,4,6,8].inject(10){ |initial, element| initial * element } # =&gt; 3840
</code>
Well, from above example you can simplify the operation process by giving operator symbol like <strong>:+, :*, :/</strong></p>

<p><code>ruby
[1,2,3].inject(:+) # =&gt; 6
[2,4,6].inject(:*) # =&gt; 48
</code>
Another awesomeness inject method is you can build hash key value from multi dimensional 2xN array, for example :</p>

<p>```ruby
[[:a,1],[:b,2],[:c,3]].inject({}){|init,elem| init.merge(elem.first => elem.last)  }</p>

<h1>=> {:a=>1, :b=>2, :c=>3}</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>

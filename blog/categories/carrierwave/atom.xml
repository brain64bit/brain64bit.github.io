<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: carrierwave | devblog of @sgt_mactavish]]></title>
  <link href="http://brain64bit.github.io/blog/categories/carrierwave/atom.xml" rel="self"/>
  <link href="http://brain64bit.github.io/"/>
  <updated>2015-04-29T00:58:46+07:00</updated>
  <id>http://brain64bit.github.io/</id>
  <author>
    <name><![CDATA[@sgt_mactavish]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CarrierWave uploader for tableless model in Ruby on Rails]]></title>
    <link href="http://brain64bit.github.io/blog/2013/11/19/carrierwave-uploader-for-tableless-model-in-ruby-on-rails/"/>
    <updated>2013-11-19T06:57:05+07:00</updated>
    <id>http://brain64bit.github.io/blog/2013/11/19/carrierwave-uploader-for-tableless-model-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>In this post i want to share my experience in implementing Carrierwave for tableless model, for example i&rsquo;ve model User :</p>

<pre><code>class User
    attr_accessor :id, :name, :avatar
    ...
end
</code></pre>

<!-- MORE -->


<p>I need to store user&rsquo;s avatar using carrierwave, in this case i create <strong>AvatarUploader</strong>, the problem is how i store avatar from instantiating User model ? If your class is subclass of ActiveRecord::Base, you can use <strong>mount_uploader</strong>
method, but if you have model like User which is not subclass of ActiveRecord::Base you will get exception :</p>

<pre><code>undefined method `mount_uploader' for User:Class
</code></pre>

<p>Based on <a href="http://carrierwave.rubyforge.org/rdoc/">carrierwave documentation</a> you can use <a href="http://carrierwave.rubyforge.org/rdoc/classes/CarrierWave/Mount.html#M000027">mount_uploader</a> if your class extend <strong>CarrierWave::Mount</strong> module and your class will have capability to store a file using instance method <code>store_(mounted_field)!</code> or <code>cache_(mounted_field)!</code>. So lets refactor our User model :</p>

<pre><code>class User
    extend CarrierWave::Mount
    attr_accessor :id, :name, :avatar
    mount_uploader :avatar, AvatarUploader
    ...
    def save
        self.store_avatar!
    end
    ...
end
</code></pre>

<p>And you can test from rails console :</p>

<pre><code>u = User.new(id:1, name:"swagger")
u.avatar = File.open(some_avatar_image_file_path)
u.save
</code></pre>

<p>from rails console, a some version of avatar will created in <strong>public/tmp/timestamp/</strong> when  you assign image file to avatar field, when method <strong>save</strong> executed it will be move to <code>public/uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}</code></p>
]]></content>
  </entry>
  
</feed>

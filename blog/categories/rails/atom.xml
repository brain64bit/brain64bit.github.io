<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | devblog of @sgt_mactavish]]></title>
  <link href="http://brain64bit.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://brain64bit.github.io/"/>
  <updated>2015-08-19T23:39:38+07:00</updated>
  <id>http://brain64bit.github.io/</id>
  <author>
    <name><![CDATA[@sgt_mactavish]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tightening controller test]]></title>
    <link href="http://brain64bit.github.io/blog/2015/08/19/tightening-controller-test/"/>
    <updated>2015-08-19T21:41:25+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/08/19/tightening-controller-test</id>
    <content type="html"><![CDATA[<h2>Problem</h2>

<p>One day i saw a snippet of code inside controller test, which is green and sadly is a little hard to understand:</p>

<p>```ruby
describe BooksController, type: :controller do
  describe &ldquo;GET #index&rdquo; do</p>

<pre><code>before do
  expect(Book).to receive_message_chain(:published, :latest, :limit).with(10)
  create_list :book, 5, :published
  create_list :book, 3
end

it { get :index }
</code></pre>

<p>  end
end
```
After a while, i realized this tests are trying to assert query invoked in an <strong>index</strong> action. Unfortunately at first sight it doesn&rsquo;t have a clear intent about what we are going to test.</p>

<!--more-->


<p>Besides that this test is not integrated with the views that will be rendered. The test still pass against this code below, if we forgot to supply view variable:</p>

<p><code>ruby
def index
  books = Book.published.latest.limit(10) # view need @books
end
</code>
Ok, we have a weak controller test.</p>

<h2>Solution</h2>

<p>I think there are two solutions, first is refactor the controller test to be more clear intent and tight, second is tell a controller example to render views.</p>

<ul>
<li>We can apply arrange-act-assert (AAA) pattern for this test and add more assertion. AAA is simple concept: setup context &ndash;> execute thing &ndash;> verify expected behavior.</li>
<li>Tell controller example to render view using <strong>render_views</strong> method and add more assertion with view.</li>
</ul>


<p>```ruby
describe BooksController, type: :controller do
  describe &ldquo;GET #index&rdquo;, :focus do</p>

<pre><code>render_views

# arrange
let!(:published_book){ create :book, :published }
let!(:unpublished_book){ create :book }

# act
before do
  get :index
end

# assertion
it "response ok &amp; render correct view" do
  expect(response).to have_http_status :ok
  expect(response).to render_template :index
end

it "query latest published books" do
  expect(assigns(:books)).to include published_book
end

it "contain only published book title" do
  expect(response.body).to include published_book.title
  expect(response.body).not_to include unpublished_book.title
end
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem using ActiveRecord #exists? in eager load resultset]]></title>
    <link href="http://brain64bit.github.io/blog/2015/03/20/problem-using-activerecord-findermethods-number-exists-in-eager-load-resultset/"/>
    <updated>2015-03-20T19:16:20+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/03/20/problem-using-activerecord-findermethods-number-exists-in-eager-load-resultset</id>
    <content type="html"><![CDATA[<p>So few weeks ago i&rsquo;ve got problem in a rails apps. New Relic reports about 500 error, where the main cause is <strong>accessing method in nil object</strong>.
Here is code snippet, causing the error :
```ruby
class User &lt; ActiveRecord::Base
  has_many :posts, &ndash;> { order &ldquo;created_at DESC&rdquo; }</p>

<p>  def latest_title</p>

<pre><code>posts.exists? &amp;&amp; posts.first.title
</code></pre>

<p>  end
end
```
From the code above, user object have a method <strong>latest_title</strong> it just check if user has posts and fetch the first post&rsquo;s title.
But somehow its produce weird error when calls <strong>user.latest_title</strong>.</p>

<!-- MORE -->


<p><code>ruby
undefined title of nil:NilClass
</code>
the <strong>posts.exists?</strong> returns true but when try accessing the first post its return nil, what a ridiculous error.
Based on error trace, i found the user object is generated by eager_load query, so the query look like this :
<code>ruby
users = User.includes(:posts).order(created_at: :desc).limit(10000)
</code>
the query eager_load <strong>posts</strong> association into user object!!!. So i found the conclusion why the error happen.</p>

<ul>
<li>users resultset are eager loaded the posts association into memory.</li>
<li>for the first time the query performed there are user who dont have posts, because using eager load the posts association stored as empty collection into user object.</li>
<li>inside <strong>#latest_title</strong> method its perform checking using <strong>exists?</strong> which is surprising to me is that exists? method <strong>always check directly to database</strong>.</li>
<li>the error come when timing of resultset generated is slightly difference with operation insertion post tho user who doesn&rsquo;t have posts. The eager load &amp; insertion happen concurrently.</li>
<li>because eager load the posts association still empty collection, but when exists? performed its directly check into database which is return true.</li>
<li>so what actually happen is like <strong>[].first.title</strong> which is produce the error :)</li>
</ul>


<p>Based on that conclusion, there are 2 options. First is do the query without eager load, second is instead use <strong>exists?</strong> please use <strong>any?</strong> which is come from ruby&rsquo;s enumerable, it doesn&rsquo;t directly check the database. And now <strong>latest_title</strong> method implementation look like:
<code>ruby
posts.any? &amp;&amp; posts.first.title
</code>
Just need to be gently and careful when using eager load.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CarrierWave uploader for tableless model in Ruby on Rails]]></title>
    <link href="http://brain64bit.github.io/blog/2013/11/19/carrierwave-uploader-for-tableless-model-in-ruby-on-rails/"/>
    <updated>2013-11-19T06:57:05+07:00</updated>
    <id>http://brain64bit.github.io/blog/2013/11/19/carrierwave-uploader-for-tableless-model-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>In this post i want to share my experience in implementing Carrierwave for tableless model, for example i&rsquo;ve model User :
<code>ruby
class User
  attr_accessor :id, :name, :avatar
  ...
end
</code></p>

<!-- MORE -->


<p>I need to store user&rsquo;s avatar using carrierwave, in this case i create <strong>AvatarUploader</strong>, the problem is how i store avatar from instantiating User model ? If your class is subclass of ActiveRecord::Base, you can use <strong>mount_uploader</strong>
method, but if you have model like User which is not subclass of ActiveRecord::Base you will get exception :</p>

<p>  undefined method `mount_uploader' for User:Class</p>

<p>Based on <a href="http://carrierwave.rubyforge.org/rdoc/">carrierwave documentation</a> you can use <a href="http://carrierwave.rubyforge.org/rdoc/classes/CarrierWave/Mount.html#M000027">mount_uploader</a> if your class extend <strong>CarrierWave::Mount</strong> module and your class will have capability to store a file using instance method <code>store_(mounted_field)!</code> or <code>cache_(mounted_field)!</code>. So lets refactor our User model :
```ruby
class User
  extend CarrierWave::Mount
  attr_accessor :id, :name, :avatar
  mount_uploader :avatar, AvatarUploader
  &hellip;
  def save</p>

<pre><code>self.store_avatar!
</code></pre>

<p>  end
  &hellip;
end
```</p>

<p>And you can test from rails console :</p>

<p>  u = User.new(id:1, name:&ldquo;swagger&rdquo;)
  u.avatar = File.open(some_avatar_image_file_path)
  u.save</p>

<p>from rails console, a some version of avatar will created in <strong>public/tmp/timestamp/</strong> when  you assign image file to avatar field, when method <strong>save</strong> executed it will be move to <code>public/uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}</code></p>
]]></content>
  </entry>
  
</feed>

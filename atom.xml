<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[devblog of @sgt_mactavish]]></title>
  <link href="http://brain64bit.github.io/atom.xml" rel="self"/>
  <link href="http://brain64bit.github.io/"/>
  <updated>2015-07-02T22:42:02+07:00</updated>
  <id>http://brain64bit.github.io/</id>
  <author>
    <name><![CDATA[@sgt_mactavish]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Elixir Pattern Matching]]></title>
    <link href="http://brain64bit.github.io/blog/2015/07/02/elixir-pattern-matching/"/>
    
    <updated>2015-07-02T22:27:48+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/07/02/elixir-pattern-matching</id>
    
    <content type="html"><![CDATA[<p>In Elixir pattern matching can be done using <strong>=</strong> operator, the equal sign compares left-hand side variable with right-hand side variable, its success if both are equal. Lets see simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'><span class="s1">&#39;bar&#39;</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="s1">&#39;bar&#39;</span> <span class="o">=</span> <span class="n">foo</span>
</span><span class='line'><span class="s1">&#39;bar&#39;</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="s1">&#39;baz&#39;</span> <span class="o">=</span> <span class="n">foo</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="no">MatchError</span><span class="p">)</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="ss">value:</span> <span class="s1">&#39;bar&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="s1">&#39;baz&#39;</span>
</span><span class='line'><span class="s1">&#39;baz&#39;</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">4</span><span class="p">)</span><span class="o">&gt;</span> <span class="s1">&#39;baz&#39;</span> <span class="o">=</span> <span class="n">foo</span>
</span><span class='line'><span class="s1">&#39;baz&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!--MORE-->


<p><code>'bar' = foo</code> is valid because both left &amp; right side are equal to &lsquo;bar&rsquo;. But in the line 3, when the sides don&rsquo;t match its raise <strong>MatchError</strong>. From above example, variable can only be assigned on the left side.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">10</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,[</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">],</span><span class="m">4</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">],</span> <span class="m">4</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">11</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">]</span> <span class="o">=</span> <span class="n">list</span>
</span><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">],</span> <span class="m">4</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">12</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">13</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="m">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="no">MatchError</span><span class="p">)</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="ss">value:</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">13</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">x</span>
</span><span class='line'><span class="m">1</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">14</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">z</span>
</span><span class='line'><span class="m">4</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">15</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A pattern (the left side) is matched if the values (the right side) have the same structure and if each term in the pattern can be matched to the corresponding term in the values.</p>

<p>Also, you can ignoring a value when assignment with <strong>underscore</strong> operator &lsquo;_&rsquo;. It&rsquo;s useful when we didn&rsquo;t need to capture a value during assignment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">19</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">_</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">20</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="m">1</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">21</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another feature that exist in elixir pattern matching is <strong>caret</strong> ^ operator. It&rsquo;s useful if you want to force to Elixir to use existing value or you don&rsquo;t want to rebinding a variable. Just prefix a variable with ^ to use existing value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">30</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">z</span> <span class="o">=</span> <span class="m">5</span>
</span><span class='line'><span class="m">5</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">31</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">^</span><span class="n">z</span><span class="p">,</span> <span class="m">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">6</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">6</span><span class="p">]</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">32</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Ref:</strong></p>

<ul>
<li><a href="http://elixir-lang.org/getting-started/pattern-matching.html">Elixir Pattern Matching</a></li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Extra '\n' inside rails mailer template]]></title>
    <link href="http://brain64bit.github.io/blog/2015/04/29/extra-slash-n-inside-rails-mailer-template/"/>
    
    <updated>2015-04-29T00:21:02+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/04/29/extra-slash-n-inside-rails-mailer-template</id>
    
    <content type="html"><![CDATA[<p>When i work with the email stuff, i accidentally found problem when email template was already sent by Mandrill SMTP.
For example in my apps there is a feature to reset password, which is of course inside the email contains <strong>reset password</strong> link.</p>

<p>For securing the reset password link it must supply a params called <strong>reset_password_token</strong>. The problem found when the reset password link doesnt
work, because its always wrong redirect. Can you spot the problem ?.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://example.com/users/password/edit?reset_password_to%20ken=asdf1234&quot;</span><span class="nt">&gt;</span>change password<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- MORE -->


<p>Accidentally the links params contains extra <strong>\n</strong>. This kind of issue with html frameworks that generate HTML with no true line breaks.
Based on <a href="https://www.ietf.org/rfc/rfc5321.txt">rfc5321</a> <strong>4.5.3.1.6.  Text Line</strong> its state :</p>

<blockquote><p>The maximum total length of a text line including the <CRLF> is 1000
octets (not counting the leading dot duplicated for transparency).</p></blockquote>

<p>Hell yeah because i&rsquo;m using SLIM for mailer template, in production SLIM compiles as a single-line by default <code>pretty: false</code> for optimization.
We can solve it by toggle the <strong>pretty</strong> option to true, see <a href="http://www.rubydoc.info/gems/slim/frames#Configuring_Slim">slim config</a>.</p>

<p>But this kind of solution will be sacrifice to other page except the mailer template not being optimized.
Instead using slim for mailer template, just use <strong>ERB</strong> so it will break every new line.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Problem using ActiveRecord #exists? in eager load resultset]]></title>
    <link href="http://brain64bit.github.io/blog/2015/03/20/problem-using-activerecord-findermethods-number-exists-in-eager-load-resultset/"/>
    
    <updated>2015-03-20T19:16:20+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/03/20/problem-using-activerecord-findermethods-number-exists-in-eager-load-resultset</id>
    
    <content type="html"><![CDATA[<p>So few weeks ago i&rsquo;ve got problem in a rails apps. New Relic reports about 500 error, where the main cause is <strong>accessing method in nil object</strong>.
Here is code snippet, causing the error :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">order</span> <span class="s2">&quot;created_at DESC&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">latest_title</span>
</span><span class='line'>    <span class="n">posts</span><span class="o">.</span><span class="n">exists?</span> <span class="o">&amp;&amp;</span> <span class="n">posts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the code above, user object have a method <strong>latest_title</strong> it just check if user has posts and fetch the first post&rsquo;s title.
But somehow its produce weird error when calls <strong>user.latest_title</strong>.</p>

<!-- MORE -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">undefined</span> <span class="n">title</span> <span class="n">of</span> <span class="kp">nil</span><span class="ss">:NilClass</span>
</span></code></pre></td></tr></table></div></figure>


<p>the <strong>posts.exists?</strong> returns true but when try accessing the first post its return nil, what a ridiculous error.
Based on error trace, i found the user object is generated by eager_load query, so the query look like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="n">created_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>the query eager_load <strong>posts</strong> association into user object!!!. So i found the conclusion why the error happen.</p>

<ul>
<li>users resultset are eager loaded the posts association into memory.</li>
<li>for the first time the query performed there are user who dont have posts, because using eager load the posts association stored as empty collection into user object.</li>
<li>inside <strong>#latest_title</strong> method its perform checking using <strong>exists?</strong> which is surprising to me is that exists? method <strong>always check directly to database</strong>.</li>
<li>the error come when timing of resultset generated is slightly difference with operation insertion post tho user who doesn&rsquo;t have posts. The eager load &amp; insertion happen concurrently.</li>
<li>because eager load the posts association still empty collection, but when exists? performed its directly check into database which is return true.</li>
<li>so what actually happen is like <strong>[].first.title</strong> which is produce the error :)</li>
</ul>


<p>Based on that conclusion, there are 2 options. First is do the query without eager load, second is instead use <strong>exists?</strong> please use <strong>any?</strong> which is come from ruby&rsquo;s enumerable, it doesn&rsquo;t directly check the database. And now <strong>latest_title</strong> method implementation look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">posts</span><span class="o">.</span><span class="n">any?</span> <span class="o">&amp;&amp;</span> <span class="n">posts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">title</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just need to be gently and careful when using eager load.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Progressbar Upload with Refile Gem]]></title>
    <link href="http://brain64bit.github.io/blog/2015/03/03/progressbar-upload-with-refile-gem/"/>
    
    <updated>2015-03-03T23:30:07+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/03/03/progressbar-upload-with-refile-gem</id>
    
    <content type="html"><![CDATA[<p>There is a ruby gem library for file upload called <a href="https://github.com/refile/refile">refile</a>.
One of features that i like is built in javascript library, which is contains several custom DOM events.
These events also can be listen, so you can provide logic easily around file upload lifecycle process.</p>

<p>By default refile provide helpers to built UI element of file input field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">attachment_field</span> <span class="ss">:file_field</span>
</span></code></pre></td></tr></table></div></figure>


<p>From that snippet above refile won&rsquo;t use built in javascript, to enable it just add an option called <strong>direct</strong> with true.</p>

<!-- MORE -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">attachment_field</span> <span class="ss">:file_field</span><span class="p">,</span> <span class="ss">direct</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refile provide several events which can attached into form upload element, for attaching the events you can use <strong>addEventListener</strong> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;upload:start&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){});</span>
</span><span class='line'><span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;upload:progress&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){});</span>
</span><span class='line'><span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;upload:success&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){});</span>
</span><span class='line'><span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;upload:complete&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){});</span>
</span><span class='line'><span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;upload:failure&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because we focused only progressbar upload, lets construct the form to using twitter bootstrap&rsquo;s progressbar, currently i&rsquo;m using slim-template for view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@object</span><span class="p">,</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span><span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-horizontal&#39;</span><span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="o">.</span><span class="n">form</span><span class="o">-</span><span class="n">group</span>
</span><span class='line'>    <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:file_field</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;col-sm-3 control-label&#39;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">col</span><span class="o">-</span><span class="n">sm</span><span class="o">-</span><span class="mi">7</span>
</span><span class='line'>      <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">attachment_field</span> <span class="ss">:file_field</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control&#39;</span><span class="p">,</span> <span class="ss">direct</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>      <span class="c1">#progress-bar-container.hidden</span>
</span><span class='line'>        <span class="o">.</span><span class="n">progress</span><span class="o">.</span><span class="n">progress</span><span class="o">-</span><span class="n">striped</span>
</span><span class='line'>          <span class="o">.</span><span class="n">progress</span><span class="o">-</span><span class="n">bar</span><span class="o">.</span><span class="n">progress</span><span class="o">-</span><span class="n">bar</span><span class="o">-</span><span class="n">info</span> <span class="n">style</span><span class="o">=</span><span class="s2">&quot;width: 0%&quot;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next lets write the javascript for calculate the progress and manipulate the UI progressbar.
We can utilize <strong>upload:progress</strong> event for this purpose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">FileUploader</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;upload:progress&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">doProgress</span><span class="p">(</span><span class="nx">event</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">));</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">doProgress</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">detail</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">percentage</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span> <span class="p">(</span><span class="nx">detail</span><span class="p">.</span><span class="nx">loaded</span> <span class="o">/</span> <span class="nx">detail</span><span class="p">.</span><span class="nx">total</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.progress-bar&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nx">percentage</span><span class="o">+</span><span class="s1">&#39;%&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">FileUploader</span><span class="p">).</span><span class="nx">init</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally this is our progressbar using refile gem, for more information you can read on <a href="https://github.com/refile/refile">refile</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Install Rmagick On OSX Yosemite]]></title>
    <link href="http://brain64bit.github.io/blog/2015/01/08/install-rmagick-on-osx-yosemite/"/>
    
    <updated>2015-01-08T23:53:22+07:00</updated>
    <id>http://brain64bit.github.io/blog/2015/01/08/install-rmagick-on-osx-yosemite</id>
    
    <content type="html"><![CDATA[<p>So i&rsquo;ve problem when installing rmagick gem in macosx yosemite, although i&rsquo;ve installed imagemagick on my system.
The problem exists when bundler try to install rmagick gem and having trouble finding <strong>MagickWand.h</strong> for building native extension.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Can<span class="s1">&#39;t install RMagick 2.13.2. Can&#39;</span>t find MagickWand.h.
</span><span class='line'>*** extconf.rb failed ***
</span><span class='line'>Could not create Makefile due to some reason, probably lack of necessary
</span><span class='line'>libraries and/or headers.  Check the mkmf.log file <span class="k">for </span>more details.  You may
</span><span class='line'>need configuration options.
</span></code></pre></td></tr></table></div></figure>




<!-- MORE -->


<p>This problem can be solved by tell explicitly to rmagick where the path of imagemagick headers file with providing configuration options on gem installation,
for example like,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install rmagick --with-opt-dir<span class="o">=</span>your_path --with-opt-include<span class="o">=</span>your_path
</span></code></pre></td></tr></table></div></figure>


<p>But this problem could be solve easily by installing <a href="http://en.wikipedia.org/wiki/Pkg-config">pkgconfig</a> first before installing imagemagick. So now you can install pkgconfig first and reinstall the imagemagick.
If you&rsquo;re using <strong>Homebrew</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install pkgconfig
</span><span class='line'>brew uninstall imagemagick <span class="o">&amp;&amp;</span> brew install imagemagick
</span></code></pre></td></tr></table></div></figure>


<p>Now after reinstallation, you can easilly install rmagick gem as usual <strong>gem install rmagick</strong></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[ruby inject method]]></title>
    <link href="http://brain64bit.github.io/blog/2014/03/18/ruby-inject-method/"/>
    
    <updated>2014-03-18T07:23:14+07:00</updated>
    <id>http://brain64bit.github.io/blog/2014/03/18/ruby-inject-method</id>
    
    <content type="html"><![CDATA[<p>Ruby inject method is useful for combining an element inside enumerable, with binary operation and initial value.</p>

<p>For example inject method useful for accumulation in one dimensional array :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span> <span class="o">|</span><span class="n">initial_variable</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span> <span class="n">element</span> <span class="o">+</span> <span class="n">initial_variable</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>from above operation, 0 in inject argument is initial value of <strong>initial_variable</strong> if you forget to specify an argument in inject method by default first element in enumerable will be used as initial value.</p>

<!-- MORE -->


<p>From above example inject method will accumulate all element inside array / collection, which is :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span> <span class="o">|</span><span class="n">initial_variable</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span> <span class="n">element</span> <span class="o">+</span> <span class="n">initial_variable</span><span class="p">}</span> <span class="c1"># =&gt; same as 1+2+3 = 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">10</span><span class="p">){</span> <span class="o">|</span><span class="n">initial</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span> <span class="n">initial</span> <span class="o">*</span> <span class="n">element</span> <span class="p">}</span> <span class="c1"># =&gt; 3840</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, from above example you can simplify the operation process by giving operator symbol like <strong>:+, :*, :/</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="ss">:*</span><span class="p">)</span> <span class="c1"># =&gt; 48</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another awesomeness inject method is you can build hash key value from multi dimensional 2xN array, for example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[[</span><span class="ss">:a</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="ss">:b</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="ss">:c</span><span class="p">,</span><span class="mi">3</span><span class="o">]].</span><span class="n">inject</span><span class="p">({}){</span><span class="o">|</span><span class="n">init</span><span class="p">,</span><span class="n">elem</span><span class="o">|</span> <span class="n">init</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">elem</span><span class="o">.</span><span class="n">first</span> <span class="o">=&gt;</span> <span class="n">elem</span><span class="o">.</span><span class="n">last</span><span class="p">)</span>  <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; {:a=&gt;1, :b=&gt;2, :c=&gt;3}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[CarrierWave uploader for tableless model in Ruby on Rails]]></title>
    <link href="http://brain64bit.github.io/blog/2013/11/19/carrierwave-uploader-for-tableless-model-in-ruby-on-rails/"/>
    
    <updated>2013-11-19T06:57:05+07:00</updated>
    <id>http://brain64bit.github.io/blog/2013/11/19/carrierwave-uploader-for-tableless-model-in-ruby-on-rails</id>
    
    <content type="html"><![CDATA[<p>In this post i want to share my experience in implementing Carrierwave for tableless model, for example i&rsquo;ve model User :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:avatar</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- MORE -->


<p>I need to store user&rsquo;s avatar using carrierwave, in this case i create <strong>AvatarUploader</strong>, the problem is how i store avatar from instantiating User model ? If your class is subclass of ActiveRecord::Base, you can use <strong>mount_uploader</strong>
method, but if you have model like User which is not subclass of ActiveRecord::Base you will get exception :</p>

<p>  undefined method `mount_uploader&#8217; for User:Class</p>

<p>Based on <a href="http://carrierwave.rubyforge.org/rdoc/">carrierwave documentation</a> you can use <a href="http://carrierwave.rubyforge.org/rdoc/classes/CarrierWave/Mount.html#M000027">mount_uploader</a> if your class extend <strong>CarrierWave::Mount</strong> module and your class will have capability to store a file using instance method <code>store_(mounted_field)!</code> or <code>cache_(mounted_field)!</code>. So lets refactor our User model :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Mount</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:avatar</span>
</span><span class='line'>  <span class="n">mount_uploader</span> <span class="ss">:avatar</span><span class="p">,</span> <span class="no">AvatarUploader</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">store_avatar!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you can test from rails console :</p>

<p>  u = User.new(id:1, name:&ldquo;swagger&rdquo;)
  u.avatar = File.open(some_avatar_image_file_path)
  u.save</p>

<p>from rails console, a some version of avatar will created in <strong>public/tmp/timestamp/</strong> when  you assign image file to avatar field, when method <strong>save</strong> executed it will be move to <code>public/uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}</code></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[add-apt-repository, server certificate verification failed]]></title>
    <link href="http://brain64bit.github.io/blog/2013/11/18/add-apt-repository/"/>
    
    <updated>2013-11-18T16:56:50+07:00</updated>
    <id>http://brain64bit.github.io/blog/2013/11/18/add-apt-repository</id>
    
    <content type="html"><![CDATA[<p>I&rsquo;ve got encountered problem when try to add new repository to ubuntu 12.04 using apt :</p>

<pre><code>Traceback (most recent call last):
    File "/usr/bin/apt-add-repository", line 125, in &lt;module&gt;
    ppa_info = get_ppa_info_from_lp(user, ppa_name)
File "/usr/lib/python2.7/dist-packages/softwareproperties/ppa.py", line 84, in get_ppa_info_from_lp
    curl.perform()
pycurl.error: (60, 'server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none')
</code></pre>

<!-- MORE -->


<p>this error happen since ppa.py depend on pycurl, curl trying to verify peer and host with curl.setopt(pycurl.SSL_VERIFYPEER, 1) and curl.setopt(pycurl.SSL_VERIFYHOST, 2):</p>

<pre><code>def get_ppa_info_from_lp(owner_name, ppa_name):
lp_url = LAUNCHPAD_PPA_API % (owner_name, ppa_name)
    # we ask for a JSON structure from lp_page, we could use
    # simplejson, but the format is simple enough for the regexp
    callback = CurlCallback()
    curl = pycurl.Curl()

    curl.setopt(pycurl.SSL_VERIFYPEER, 1)
    curl.setopt(pycurl.SSL_VERIFYHOST, 2)

    curl.setopt(pycurl.WRITEFUNCTION, callback.body_callback)
    # only useful for testing
    if LAUNCHPAD_PPA_CERT:
        curl.setopt(pycurl.CAINFO, LAUNCHPAD_PPA_CERT)
    curl.setopt(pycurl.URL, str(lp_url))
    curl.setopt(pycurl.HTTPHEADER, ["Accept: application/json"])
    curl.perform()
    curl.close()
    lp_page = callback.contents
    return json.loads(lp_page) 
</code></pre>

<p>from <a href="http://curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTSSLVERIFYHOST">http://curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTSSLVERIFYHOST</a> you can bypass this verification using pass a long set to 0 :</p>

<pre><code>...
curl.setopt(pycurl.SSL_VERIFYPEER, 0)
curl.setopt(pycurl.SSL_VERIFYHOST, 0)
...
</code></pre>
]]></content>
    
  </entry>
  
</feed>